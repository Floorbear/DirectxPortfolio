#pragma once
#include <GameEngineCore/GameEngineActor.h>


//렌더러를 가지는 액터들은 이 클래스를 상속 받는다.
//스프라이트 리소스를 좀 더 활용하기 용이하게 하기위한 클래스
class DNFLevel;
class DNFRenderObject : public GameEngineActor
{
	friend class DNFLevel;
public:
	DNFRenderObject();
	~DNFRenderObject();


	DNFRenderObject(const DNFRenderObject& _Other) = delete;
	DNFRenderObject(const DNFRenderObject&& _Other) noexcept = delete;
	DNFRenderObject& operator=(const DNFRenderObject& _Ohter) = delete;
	DNFRenderObject& operator=(const DNFRenderObject&& _Other) noexcept = delete;

	DNFLevel* GetDNFLevel();


protected:

	//시간관련 컨테이너
	std::map<std::string, float> CurTime_; //누적된 DeltaTime을 보관하는 컨테이너
	std::map<std::string, float> DefaultTime_; //처음 Set된 Time을 보관하는 컨테이너 , 상태판단 Time은 Random의 최댓값 기준
	std::map<std::string, float> FloatValue_; //이동속도, 사거리 등을 보관할 컨테이너

	GameEngineTextureRenderer* MainRenderer_;
	GameEngineTextureRenderer* ShadowRenderer_;

	//shadow관련 함수& 변수
	void CreateDNFAnimation(const std::string& _AnimationName, const FrameAnimation_DESC& _Desc);
	void ChangeDNFAnimation(const std::string& _Name);
	void ShadowUpdate();

	float4 ShadowPos_;
	float4 ShadowRot_;

	float4 PrevPos_;

	GameEngineCollision* BotCol_;
	float4 BotPos_;
	
	//세팅이 안된것을 체크 해 주는 함수
	void ErrorCheck();

	//Update에서 호출
	//하는 역할
	//1. 에러 체크
	//2. Shadow업데이트
	void DNFUpdate();

	//start에서 호출
	//하는 역할
	//1. MainRenderer 생성
	virtual void DNFStart();


	//Update에서 돌려줘야함
	void ZSort();

	bool IsStart_; //DnfStart 호출했냐

private:

};

